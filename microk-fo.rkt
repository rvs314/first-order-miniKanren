#lang racket/unit

(require "common.rkt" "microk-sig.rkt" racket/match racket/syntax)

(import)
(export (prefix pub: microk^))

;; first-order microKanren
;; I have to use the `pub:` nonsense to diffrentiate
;; the syntax `disj` from the constructor `disj`
(struct disj (g1 g2)
  #:prefab #:extra-constructor-name pub:disj)
(struct conj (g1 g2)
  #:prefab #:extra-constructor-name pub:conj)
(struct relate  (thunk description)
  #:prefab #:extra-constructor-name pub:relate)
(struct ==  (t1 t2)
  #:prefab #:extra-constructor-name pub:==)
(struct =/= (t1 t2)
  #:prefab #:extra-constructor-name pub:=/=)
(struct symbolo (t)
  #:prefab #:extra-constructor-name pub:symbolo)
(struct stringo (t)
  #:prefab #:extra-constructor-name pub:stringo)
(struct numbero (t)
  #:prefab #:extra-constructor-name pub:numbero)
(struct not-symbolo (t)
  #:prefab #:extra-constructor-name pub:not-symbolo)
(struct not-stringo (t)
  #:prefab #:extra-constructor-name pub:not-stringo)
(struct not-numbero (t)
  #:prefab #:extra-constructor-name pub:not-numbero)
(struct bind (bind-s bind-g)
  #:prefab #:extra-constructor-name pub:bind)
(struct mplus (mplus-s1 mplus-s2)
  #:prefab #:extra-constructor-name pub:mplus)
(struct pause (pause-state pause-goal)
  #:prefab #:extra-constructor-name pub:pause)

(define (mature? s) (or (not s) (pair? s)))
(define (mature s)
  (if (mature? s) s (mature (step s))))

(define-values (pub:mature? pub:mature) (values mature? mature))

(define (start st g)
  (match g
    ((disj g1 g2)
     (step (mplus (pause st g1)
                  (pause st g2))))
    ((conj g1 g2)
     (step (bind (pause st g1) g2)))
    ((relate thunk _)
     (pause st (thunk)))
    ((== t1 t2) (state->stream (unify t1 t2 st)))
    ((=/= t1 t2) (state->stream (disunify t1 t2 st)))
    ((symbolo t) (state->stream (typify t symbol? st)))
    ((stringo t) (state->stream (typify t string? st)))
    ((numbero t) (state->stream (typify t number? st)))
    ((not-symbolo t) (state->stream (distypify t symbol? st)))
    ((not-stringo t) (state->stream (distypify t string? st)))
    ((not-numbero t) (state->stream (distypify t number? st)))))

(define (step s)
  (match s
    ((mplus s1 s2)
     (let ((s1 (if (mature? s1) s1 (step s1))))
       (cond ((not s1) s2)
             ((pair? s1)
              (cons (car s1)
                    (mplus s2 (cdr s1))))
             (else (mplus s2 s1)))))
    ((bind s g)
     (let ((s (if (mature? s) s (step s))))
       (cond ((not s) #f)
             ((pair? s)
              (step (mplus (pause (car s) g)
                           (bind (cdr s) g))))
             (else (bind s g)))))
    ((pause st g) (start st g))
    (_            s)))
